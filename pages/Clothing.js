import Head from "next/head";
import styled from "styled-components";
import { Header } from "../Components/Header/Header";
import { PastPresent } from "../Components/Past-Present/PastPresent";
import { SneakerFeed } from "../Components/SneakerFeed/SneakerFeed";
import { Options } from "../Components/mensWomensKidsSelector/mensWomensKidsSelector";
import { SearchBar } from "../Components/SearchBar/SearchBar";
import { useDispatch, useSelector } from "react-redux";
import { useEffect } from "react";
import { fetchClothingInfo } from "../store/ClothingReleaseInfo";
import SideNavBar from "../Components/sideMenu/SideNavBar";
import Menu from "../Components/sideMenu/Menu";
import { getDate } from "date-fns";
import { useState } from "react";

export default function Clothing({ data }) {
  const [open, setOpen] = useState(false);
  const dispatch = useDispatch();

  useEffect(() => {
    dispatch(fetchClothingInfo())
      .then(() => dispatch({ type: "clothing/splitClothingInfo" }))
      .then(() => dispatch({ type: "clothing/filterMonths" }))
      .then(() => dispatch({ type: "clothing/copyMonthsArray" }));
  }, []);

  const term = useSelector((state) => state.clothing.searchTerm);

  let info = useSelector((state) => {
    if (state.clothing.currentClothingFeedUpcoming === true) {
      const months = Object.keys(state.clothing.futureMonths);

      return months.map((element) => {
        return state.clothing.futureClothingInfoAgeOrGender[element].filter(
          (element) => {
            return element.title.toLowerCase().includes(term.toLowerCase());
          }
        );
      });
    } else {
      const months = Object.keys(state.clothing.futureMonths);
      return months.map((element) => {
        return state.clothing.pastClothingInfoAgeOrGender[element].filter(
          (element) => {
            return element.title.toLowerCase().includes(term.toLowerCase());
          }
        );
      });
    }
  });

  const filter = useSelector(
    (state) => state.clothing.mensWomensKidsFilterValue
  );

  let filteredResults;

  if (filter === "reset") {
    filteredResults = info;
  } else {
    filteredResults = info.map((element) => {
      return element.filter((element) => element[filter] === true);
    });
  }

  filteredResults.map((element) =>
    element.sort((firstEl, secondEl) => {
      return (
        getDate(new Date(firstEl.date.replace(/, /g, "/"))) -
        getDate(new Date(secondEl.date.replace(/, /g, "/")))
      );
    })
  );

  return (
    <Container>
      {/* <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <HeaderContainer>
        <Header />
        <SearchNavContainer>
          <SearchBar clothing={true} />
          <div>
            <SideNavBar open={open} setOpen={setOpen} />
            <Menu open={open} setOpen={setOpen} />
          </div>
        </SearchNavContainer>
      </HeaderContainer>

      <PastPresent sneaker={false} clothing={true} />
      <Options sneaker={false} clothing={true} />
      <SneakerFeed filteredResults={filteredResults} />
      <footer></footer> */}
      Hello
    </Container>
  );
}

const HeaderContainer = styled.div`
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  width: 100%;
`;

const Container = styled.div`
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  background-color: #f5f5f5;
  overflow: hidden;
`;

const SearchNavContainer = styled.div`
  display: flex;
`;
